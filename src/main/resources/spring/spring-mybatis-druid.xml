<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-4.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
                        http://www.springframework.org/schema/aop
                        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
                        http://www.springframework.org/schema/task
                        http://www.springframework.org/schema/task/spring-task-4.1.xsd">

	<!-- 启用注解 -->
	<context:annotation-config />
	<!-- 自动扫描 -->
	<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
	<context:component-scan base-package="com.nxd">
		<context:exclude-filter type="annotation"
								expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 事务相关控制 -->
	<bean id="transactionManager" name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>

	<!-- 配置DataSource数据源 -->
	<!-- 阿里 druid 数据库连接池 -->
	<bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" destroy-method = "close">
		<!-- 数据库基本信息配置 -->
		<property name = "url" value = "${druid.url}" />
		<property name = "username" value = "${druid.username}" />
		<property name = "password" value = "${druid.password}" />
		<property name = "driverClassName" value = "${druid.driverClassName}" />
		<property name = "filters" value = "${druid.filters}" />

		<!-- 最大并发连接数 -->
		<property name = "maxActive" value = "${druid.maxActive}" />

		<!-- 初始化连接数量 -->
		<property name = "initialSize" value = "${druid.initialSize}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name = "maxWait" value = "${druid.maxWait}" />

		<!-- 最小空闲连接数 -->
		<property name = "minIdle" value = "${druid.minIdle}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name = "timeBetweenEvictionRunsMillis" value ="${druid.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name = "minEvictableIdleTimeMillis" value ="${druid.minEvictableIdleTimeMillis}" />
		<property name = "validationQuery" value = "${druid.validationQuery}" />
		<property name = "testWhileIdle" value = "${druid.testWhileIdle}" />
		<property name = "testOnBorrow" value = "${druid.testOnBorrow}" />
		<property name = "testOnReturn" value = "${druid.testOnReturn}" />
		<property name = "maxOpenPreparedStatements" value ="${druid.maxOpenPreparedStatements}" />

		<!-- 打开 removeAbandoned 功能 -->
		<property name = "removeAbandoned" value = "${druid.removeAbandoned}" />

		<!-- 1800 秒，也就是 30 分钟 -->
		<property name = "removeAbandonedTimeout" value ="${druid.removeAbandonedTimeout}" />

		<!-- 关闭 abanded 连接时输出错误日志 -->
		<property name = "logAbandoned" value = "${druid.logAbandoned}" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception"/>
			<tx:method name="insert*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
			<tx:method name="save*" propagation="REQUIRED" read-only="false"
					   rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>

	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!-- 事物处理 -->
	<aop:config>
		<aop:pointcut id="pc" expression="execution(* com.nxd.binjiang.service..*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />
	</aop:config>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!--<property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>-->
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:mapper/**"></property>
		<property name="typeAliasesPackage" value="com.nxd.entity"/>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageInterceptor">
					<!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
					<property name="properties">
						<value>
							helperDialect=mysql
							<!--当reasonable设置为 true 时，pageNum<=0 时会查询第一页， pageNum>pages（超过总数时），会查询最后一页-->
							reasonable=true
							<!--支持通过 Mapper 接口参数来传递分页参数-->
							supportMethodsArguments=true
							<!--params=count=countSql-->
							<!--允许在运行时根据多数据源自动识别对应方言的分页-->
							autoRuntimeDialect=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	<!-- 通过扫描的模式，扫描在com.nxd.dao.mapper目录下的所有mapper -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.nxd.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 创建一个sqlSession实例，线程安全的，可以在所有DAO实例共享，原理是将sqlSession，事务与当前线程挂钩 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>


	<!-- ================ Shiro start ================ -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="ShiroRealm" />
	</bean>

	<!-- 項目自定义的Realm -->
	<bean id="ShiroRealm" class="com.nxd.binjiang.interceptor.shiro.ShiroRealm" ></bean>

	<!-- Shiro Filter -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />

		<property name="loginUrl" value="/" />

		<property name="successUrl" value="/toIndex" />

		<property name="unauthorizedUrl" value="/login" />

		<property name="filterChainDefinitions">
			<value>
				/system/** 				= anon
				/static/** 				= anon
				/picture/* 				= anon
				/uploadFiles/* 			= anon
				/pages/** 				= anon
				/page/** 				= anon
				/code.do 				= anon
				/toLogin  	 		    = anon
				/login  	 		    = anon
				/interface/**			= anon
				/webSocketServer        = anon
				/wechat/**				= anon
				/**						= authc
			</value>
		</property>
	</bean>
	<!-- ================ Shiro end ================ -->

</beans>